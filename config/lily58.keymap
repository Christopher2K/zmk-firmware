#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/lily58.h"

// LAYERS
#define DFT 0
#define LWR 1
#define RSE 2

// KEYS
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 LF5 LF4 LF3 LF2 LF1 LF0 LEC
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 RF5 RF4 RF3 RF2 RF1 RF0 REC
#define KEYS_T LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3

// MODS VALUES
#define HM_TAPPING_TERM 300
#define HM_QUICK_TAP 175
#define HM_PRIOR_IDLE 150

#define CB_TERM 30
#define CB_IDLE 150

// HOMEROW MODS
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    bindings = <&kp>, <&kp>;
    tapping-term-ms = <HM_TAPPING_TERM>;
    quick-tap-ms = <HM_QUICK_TAP>;
    require-prior-idle-ms = <HM_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_R KEYS_T>;
    hold-trigger-on-release;
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    bindings = <&kp>, <&kp>;
    tapping-term-ms = <HM_TAPPING_TERM>;
    quick-tap-ms = <HM_QUICK_TAP>;
    require-prior-idle-ms = <HM_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_L KEYS_T>;
    hold-trigger-on-release;
)

// Special config for shift keys
ZMK_HOLD_TAP(hmsl,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM>;
    quick-tap-ms = <HM_QUICK_TAP>;
    require-prior-idle-ms = <HM_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_R KEYS_T>;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmsr,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM>;
    quick-tap-ms = <HM_QUICK_TAP>;
    require-prior-idle-ms = <HM_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_L KEYS_T>;
    bindings = <&kp>, <&kp>;
)

// COMBOS
/*                                      58 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────────┬────────────────────────────╮ ╭─────────────────────────────┬─────────────────────────────╮
  │  0   1   2   3   4   5     │      6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0     │     RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17     │     18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0     │     RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29     │     30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0     │     RB0 RB1 RB2 RB3 RB4 RB5 │
  │ 36  37  38  39  40  41  42 │ 43  44  45  46  47  48  49 │ │ LF5 LF4 LF3 LF2 LF1 LF0 LEC │ REC RF0 RF1 RF2 RF3 RF4 RF5 │
  ╰───────────╮ 50  51  52  53 │ 54  55  56  57 ╭───────────╯ ╰───────────╮ LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3 ╭───────────╯
              ╰────────────────┴────────────────╯                         ╰─────────────────┴─────────────────╯             */

ZMK_COMBO(esc,   &kp ESC,      LB1 LB2, DFT, CB_TERM, CB_IDLE)
ZMK_COMBO(lbkt,  &kp LBKT,     RT1 RT2, DFT, CB_TERM, CB_IDLE)
ZMK_COMBO(rbkt,  &kp RBKT,     RT2 RT3, DFT, CB_TERM, CB_IDLE)

ZMK_COMBO(lpar,  &kp LPAR,     RM1 RM2, DFT, CB_TERM, CB_IDLE)
ZMK_COMBO(rpar,  &kp RPAR,     RM2 RM3, DFT, CB_TERM, CB_IDLE)

ZMK_COMBO(lbrc,  &kp LBRC,     RB1 RB2, DFT, CB_TERM, CB_IDLE)
ZMK_COMBO(rbrc,  &kp RBRC,     RB2 RB3, DFT, CB_TERM, CB_IDLE)

ZMK_COMBO(lt,    &kp LT,       RF1 RF2, DFT, CB_TERM, CB_IDLE)
ZMK_COMBO(gt,    &kp GT,       RF2 RF3, DFT, CB_TERM, CB_IDLE)

// LAYERS
ZMK_LAYER(default_layer,
     // ╭───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────╮                                           ╭───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────╮
          &kp GRAVE           &kp N1              &kp N2              &kp N3              &kp N4              &kp N5                                                          &kp N6              &kp N7              &kp N8              &kp N9              &kp N0              &kp EQUAL
     // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤                                           ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
          &kp TAB             &kp Q               &kp W               &kp E               &kp R               &kp T                                                           &kp Y               &kp U               &kp I               &kp O               &kp P               &kp BSLH
     // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤                                           ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
          &kp ESC             &hml LCTRL A        &hml LALT S         &hml LGUI D         &hmsl LSHFT F       &kp G                                                           &kp H               &hmsr RSHFT J       &hmr RGUI K         &hmr LALT L         &hmr RCTRL SEMI     &kp SQT
     // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────╮   ╭───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
          &kp LSHFT           &kp Z               &kp X               &kp C               &kp V               &kp B               &kp LBKT                &kp RBKT            &kp N               &kp M               &kp COMMA           &kp DOT             &kp FSLH            &kp MINUS 
     // ╰───────────────────┴───────────────────┴───────────────────┴───────────────────┼───────────────────┼───────────────────┼───────────────────┤   ├───────────────────┼───────────────────┼───────────────────┼───────────────────┴───────────────────┴───────────────────┴───────────────────╯
                                                                      &mo LWR             &trans              &kp BSPC            &kp SPACE               &kp RET             &kp BSPC            &trans              &mo RSE
     //                                                             ╰───────────────────┴───────────────────┴───────────────────┴───────────────────╯   ╰───────────────────┴───────────────────┴───────────────────┴───────────────────╯
)

ZMK_LAYER(lower_layer,
      // ╭───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────╮                                           ╭───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────╮
           &bt BT_CLR          &bt BT_SEL 0        &bt BT_SEL 1        &bt BT_SEL 2        &bt BT_SEL 3        &bt BT_SEL 4                                                    &trans              &trans              &trans              &trans              &trans              &trans
      // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤                                           ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
           &trans              &kp N1              &kp N2              &kp N3              &kp N4              &kp N5                                                          &kp N6              &kp N7              &kp N8              &kp N9              &kp N0              &trans
      // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤                                           ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
           &trans              &trans              &trans              &trans              &trans              &trans                                                          &kp LEFT_ARROW      &kp DOWN_ARROW      &kp UP_ARROW        &kp RIGHT_ARROW     &trans              &trans
      // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────╮   ╭───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
           &trans              &trans              &trans              &trans              &trans              &trans              &trans                  &trans              &trans              &trans              &trans              &trans              &trans              &trans
      // ╰───────────────────┴───────────────────┴───────────────────┴───────────────────┼───────────────────┼───────────────────┼───────────────────┤   ├───────────────────┼───────────────────┼───────────────────┼───────────────────┴───────────────────┴───────────────────┴───────────────────╯
                                                                       &trans              &trans              &trans              &trans                  &trans              &trans              &trans              &trans              
      //                                                             ╰───────────────────┴───────────────────┴───────────────────┴───────────────────╯   ╰───────────────────┴───────────────────┴───────────────────┴───────────────────╯
)

ZMK_LAYER(raise_layer,
      // ╭───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────╮                                           ╭───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────┬───────────────────╮
           &trans              &trans              &trans              &trans              &trans              &trans                                                          &trans              &trans              &trans              &trans              &trans              &trans
      // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤                                           ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
           &kp GRAVE           &kp N1              &kp N2              &kp N3              &kp N4              &kp N5                                                          &kp N6              &kp N7              &kp N8              &kp N9              &kp N0              &trans
      // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤                                           ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
           &kp F1              &kp F2              &kp F3              &kp F4              &kp F5              &kp F6                                                          &trans              &kp LEFT            &kp DOWN            &kp UP              &kp RIGHT           &trans
      // ├───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────╮   ╭───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┼───────────────────┤
           &kp F7              &kp F8              &kp F9              &kp F10             &kp F11             &kp F12             &trans                  &trans              &kp KP_PLUS         &kp MINUS           &kp EQUAL           &kp LBKT            &kp RBKT            &kp BSLH
      // ╰───────────────────┴───────────────────┴───────────────────┴───────────────────┼───────────────────┼───────────────────┼───────────────────┤   ├───────────────────┼───────────────────┼───────────────────┼───────────────────┴───────────────────┴───────────────────┴───────────────────╯
                                                                       &trans              &trans              &trans              &trans                  &trans              &trans              &trans              &trans              
      //                                                             ╰───────────────────┴───────────────────┴───────────────────┴───────────────────╯   ╰───────────────────┴───────────────────┴───────────────────┴───────────────────╯
)
